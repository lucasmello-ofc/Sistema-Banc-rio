from abc import ABC, abstractmethod
from datetime import date

# --Histórico ---- #

class Historico:
    def __init__(self):
        self.transacoes = []

    def adicionar_transacao(self, transacao):
        self.transacoes.append(transacao)

# --- Transação (Interface)--- #

class Transacao(ABC):

    @abstractmethod
    def registrar(self, conta):
        pass

# -- Depósito --- #

class Deposito(Transacao):
    def __init__(self, valor):
        self.valor = valor

    def registrar(self, conta):
        conta.depositar(self.valor)
        conta.historico.adicionar_transacao(self)

# -- Saque --- #

class Saque(Transacao):
    def __init__(self, valor):
        self.valor = valor

    def registrar(self, conta):
        conta.sacar(self.valor)
        conta.historico.adicionar_transacao(self)

# -- Conta --- #

class Conta:
    def __init__(self, cliente, numero, agencia):
        self.saldo = 0.0
        self.numero = numero
        self.agencia = agencia
        self.cliente = cliente
        self.historico = Historico()

    def saldo_conta(self):
        return self.saldo

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(cliente, numero, "0001")

    def sacar(self, valor):
        if valor > 0 and valor <= self.saldo:
            self.saldo -= valor
            print(f"Saque de {valor:.2f} realizado com sucesso.")
            return True
        print("Saldo insuficiente ou valor inválido.")
        return False

    def depositar(self, valor):
        if valor > 0:
            self.saldo += valor
            print(f"Depósito de {valor:.2f} realizado com sucesso.")
            return True
        print("Valor de depósito inválido.")
        return False

# -- Conta Corrente --- #

class ContaCorrente(Conta):
    def __init__(self, cliente, numero, agencia="0001", limite=500.0, limite_saques=3):
        super().__init__(cliente, numero, agencia)
        self.limite = limite
        self.limite_saques = limite_saques

# -- Cliente -- #

class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        self.contas.append(conta)

# -- Pessoa Física -- #

class PessoaFisica(Cliente):
    def __init__(self, cpf, nome, data_nascimento, endereco):
        super().__init__(endereco)
        self.cpf = cpf
        self.nome = nome
        self.data_nascimento = data_nascimento
